// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: post.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getPosts = `-- name: GetPosts :one

INSERT INTO posts (
    id,
    created_at,
    updated_at,
    title,
    description,
    url,
    feed_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7
)

RETURNING id, created_at, updated_at, title, description, url, feed_id
`

type GetPostsParams struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Url         string
	FeedID      uuid.UUID
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPosts,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Description,
		arg.Url,
		arg.FeedID,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.FeedID,
	)
	return i, err
}

const joinAndGetPostsAsUser = `-- name: JoinAndGetPostsAsUser :one

SELECT posts.id, posts.created_at, posts.updated_at, title, description, url, posts.feed_id, feed_follows.id, feed_follows.created_at, feed_follows.updated_at, user_id, feed_follows.feed_id FROM posts
Join feed_follows ON Posts.feed_id = feed_follows.feed_id
WHERE feed_follows.user_id = $1
ORDER BY posts.updated_at DESC 
LIMIT $2
`

type JoinAndGetPostsAsUserParams struct {
	UserID uuid.UUID
	Limit  int32
}

type JoinAndGetPostsAsUserRow struct {
	ID          uuid.UUID
	CreatedAt   time.Time
	UpdatedAt   time.Time
	Title       string
	Description string
	Url         string
	FeedID      uuid.UUID
	ID_2        uuid.UUID
	CreatedAt_2 time.Time
	UpdatedAt_2 time.Time
	UserID      uuid.UUID
	FeedID_2    uuid.UUID
}

func (q *Queries) JoinAndGetPostsAsUser(ctx context.Context, arg JoinAndGetPostsAsUserParams) (JoinAndGetPostsAsUserRow, error) {
	row := q.db.QueryRowContext(ctx, joinAndGetPostsAsUser, arg.UserID, arg.Limit)
	var i JoinAndGetPostsAsUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Description,
		&i.Url,
		&i.FeedID,
		&i.ID_2,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.UserID,
		&i.FeedID_2,
	)
	return i, err
}
